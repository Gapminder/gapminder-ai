[project]
name = "gapminder-ai-automation-ai"
version = "0.1.0"
description = "Secured API endpoints that enables AI automation workflows"
authors = [{ name = "Gapminder Foundation", email = "info@gapminder.org" }]
requires-python = "~=3.13"
readme = "README.md"
classifiers = [
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.13",
]
dependencies = [
    "pandas>=2.0.3,<3",
    "mypy>=1.9.0,<2",
    "unidecode>=1.3.6,<2",
    "polars>=1.19.0,<2",
    "tokenizers>=0.21.1,<0.22",
    "pydantic>=2.1.1,<3",
    "pandera[mypy]>=0.22.0,<0.23",
    "functions-framework>=3.0.0,<4",
    "python-dotenv>=0.20.0,<0.21",
    "gspread>=5.1.1,<6",
    "gspread-dataframe",
    "google-auth>=2.6.6,<3",
    "google-api-python-client>=2.45.0,<3",
    "types-requests>=2.28.11.6,<3",
    "bracelogger>=1.1.0,<2",
    "litellm[proxy]~=1.55",
    "huggingface_hub<1.0",
    "google-generativeai>=0.3.2,<0.4",
    "websocket-client>=1.6.1,<2",
    "dashscope>=1.6.0,<2",
    "redis>=5.0.1,<6",
    "google-cloud-aiplatform>=1.39.0,<2",
    "langdetect>=1.0.9,<2",
    "duckdb<2",
    "duckdb-engine<2",
    "jupysql>=0.10.10,<0.11",
    "anthropic[vertex]>=0.42.0,<0.43",
    "fireworks-ai>=0.15.1,<0.16",
    "mistralai>=1.5.2,<2",
]

[project.scripts]
gm-eval = "lib.pilot.gm_eval.cli:main"

[dependency-groups]
dev = [
    "coverage>=6.3.2,<7",
    "freezegun>=1.2.1,<2",
    "poethepoet>=0.13.1,<0.14",
    "pre-commit>=2.18.1,<3",
    "pytest>=7.2.0,<8",
    "pytest-cov>=4.0.0,<5",
    "jupyter>=1.0.0,<2",
    "ipykernel>=6.6.0,<7",
    "jupytext>=1.14.4,<2",
    "pytest-mock>=3.6.1,<4",
]

[tool.uv]

[[tool.uv.index]]
name = "pytorch_cpu"
url = "https://download.pytorch.org/whl/cpu"
explicit = true

[tool.uv.sources]
gspread-dataframe = { git = "https://github.com/robin900/gspread-dataframe.git", rev = "master" }

[tool.hatch.build.targets.sdist]
include = ["lib"]

[tool.hatch.build.targets.wheel]
include = ["lib"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.poe.tasks]
test = ["pytest", "lint"]
pytest = "pytest --cov=lib --verbose tests/"
lint = { shell = "find . -type d -name '.venv*' -prune -o -type f -name '*.py' -print0 | xargs -0 pre-commit run --files" }
install_kernel = "python -m ipykernel install --user --name gapminder-ai-automation-api"
set_jupytext_as_default_viewer = "jupytext-config set-default-viewer"
jupyter = 'jupyter-notebook'
notebooks = ["install_kernel", "set_jupytext_as_default_viewer", "jupyter"]
fetch_questions = "python yival_experiments/scripts/fetch_questions.py"
generate_result = "python yival_experiments/scripts/generate_result.py"
start_redis = "docker run --rm -p 26379:6379 --name local-redis redis redis-server --save 60 1 --loglevel warning"

[tool.poe.tasks.run_experiment]
shell = "cd yival_experiments && yival run --output ./output/$experiment ./experiment_configurations/$experiment.yaml"
help = "Run a yival experiment with a given name."

[[tool.poe.tasks.run_experiment.args]]
  name = "experiment"
  help = "Name of the experiment to run"
  options = ["-e", "--experiment"]

[tool.poe.tasks.generate_experiment_config]
shell = "python yival_experiments/scripts/generate_experiment_config.py --evaluator $evaluator"
help = "generate experiment config, and set evaluator"

[[tool.poe.tasks.generate_experiment_config.args]]
  name = "evaluator"
  help = "Name of the evaluator"
  options = ["-e", "--evaluator"]
  default = "gpt4"

[tool.poe]
envfile = ".env"

[tool.ruff]
force-exclude = true

select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "N",  # pep8-naming
]
ignore = [
    "E501",  # line too long, handled by black
    "N801",  # FIXME: Incorrect pep8-naming conventions
    "N802",  # FIXME: Incorrect pep8-naming conventions
    "N803",  # FIXME: Incorrect pep8-naming conventions
    "N806",  # FIXME: Incorrect pep8-naming conventions
    "N812",  # FIXME: Incorrect pep8-naming conventions
    "N815",  # FIXME: Incorrect pep8-naming conventions
    "N818",  # FIXME: Incorrect pep8-naming conventions
    "N999",  # FIXME: Incorrect pep8-naming conventions
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "EM", "ERA", "EXE", "FBT", "ICN", "INP", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PT", "PTH", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "TRY", "UP", "YTT"]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "*snapshots/",
]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.9.
target-version = "py39"

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

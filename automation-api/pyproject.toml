[tool.poetry]
name = "gapminder-ai-automation-ai"
version = "0.1.0"
description = "Secured API endpoints that enables AI automation workflows"
authors = ["Gapminder Foundation <info@gapminder.org>"]
readme = "README.md"
classifiers = [
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
]
packages = [{ include = "lib" }]

[tool.poetry.dependencies]
python = ">=3.11,<3.12"
pandas = "^2.0.3"
mypy = "^0.991"
unidecode = "^1.3.6"
polars = "^0.19.12"

# for data frames schemas / types validation
pydantic = "^2.1.1"
pandera = {extras = ["mypy"], version = "^0.17.0"}

# to simplify development and deployment of cloud functions
functions-framework = "^3.0.0"
python-dotenv = "^0.20.0"

# for gsheets import/export
gspread = "^5.1.1"
gspread-dataframe = {git = "https://github.com/robin900/gspread-dataframe.git#main"}

# for gdrive API consumption
google-auth = "^2.6.6"
google-api-python-client = "^2.45.0"

# typehints
types-requests = "^2.28.11.6"

# for logging that supports {variables} in brace format
bracelogger = "^1.1.0"

# for access to AI models
litellm = "^1.19.4"
langchain = "^0.0.275"

# for hugging face
huggingface_hub = "^0.15.1"

# for google PaLM
google-generativeai = "^0.3.2"

# for iflytek
websocket-client = "^1.6.1"

# for alibaba
dashscope = "^1.6.0"

# yival
yival = {git = "https://github.com/Gapminder/YiVal.git#gapminder-ai"}
redis = "^5.0.1"

# gemini
google-cloud-aiplatform = "^1.39.0"

# unsorted (new deps gets listed here)
langdetect = "^1.0.9"



[tool.poetry.dev-dependencies]
coverage = "^6.3.2"
freezegun = "^1.2.1"
poethepoet = "^0.13.1"
pre-commit = "^2.18.1"
pytest = "^7.2.0"
pytest-cov = "^4.0.0"
jupyter = "^1.0.0"
ipykernel = "^6.6.0"
jupytext = "^1.14.4"
pytest-mock = "^3.6.1"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poe.tasks]
test = ["pytest", "lint"]
pytest = "pytest --cov=lib --verbose tests/"
lint = { shell = "find . -type d -name '.venv*' -prune -o -type f -name '*.py' -print0 | xargs -0 pre-commit run --files" }
install_kernel = "python -m ipykernel install --user --name gapminder-ai-automation-api"
set_jupytext_as_default_viewer = "jupytext-config set-default-viewer"
jupyter = 'jupyter-notebook'
notebooks = ["install_kernel", "set_jupytext_as_default_viewer", "jupyter"]
fetch_questions = "python yival_experiments/scripts/fetch_questions.py"
generate_experiment_config = "python yival_experiments/scripts/generate_experiment_config.py"
generate_result = "python yival_experiments/scripts/generate_result.py"
start_redis = "docker run --rm -p 26379:6379 --name local-redis redis redis-server --save 60 1 --loglevel warning"

[tool.poe.tasks.run_experiment]
shell = "cd yival_experiments && yival run --output ./output/$experiment ./experiment_configurations/$experiment.yaml"
help = "Run a yival experiment with a given name."

  [[tool.poe.tasks.run_experiment.args]]
  name = "experiment"
  help = "Name of the experiment to run"
  options = ["-e", "--experiment"]

[tool.poe]
envfile = ".env"

[tool.ruff]
force-exclude = true

select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "N",  # pep8-naming
]
ignore = [
    "E501",  # line too long, handled by black
    "N801",  # FIXME: Incorrect pep8-naming conventions
    "N802",  # FIXME: Incorrect pep8-naming conventions
    "N803",  # FIXME: Incorrect pep8-naming conventions
    "N806",  # FIXME: Incorrect pep8-naming conventions
    "N812",  # FIXME: Incorrect pep8-naming conventions
    "N815",  # FIXME: Incorrect pep8-naming conventions
    "N818",  # FIXME: Incorrect pep8-naming conventions
    "N999",  # FIXME: Incorrect pep8-naming conventions
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "EM", "ERA", "EXE", "FBT", "ICN", "INP", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PT", "PTH", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "TRY", "UP", "YTT"]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "*snapshots/",
]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.9.
target-version = "py39"

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

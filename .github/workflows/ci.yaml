name: Python CI
on: push
env:
  OPENAI_API_KEY: invalid-openai-api-key-for-ci
  OPENAI_ORG_ID: invalid-openai-org-id-for-ci

jobs:
  lint-all:
    name: "Lint All"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: [3.11]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      - name: Load cached pre-commit environment
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ runner.os }}-${{matrix.python}}-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Install pre-commit
        run: pip install pre-commit

      - name: Lint
        run: pre-commit run --all-files

  test-automation-api:
    name: "(automation-api) Test"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: [3.11]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      - name: Load cached Poetry installation
        uses: actions/cache@v4
        with:
          path: ~/.local
          key: poetry-${{ runner.os }}-${{ matrix.python }}-${{ hashFiles('.github/workflows/ci.yaml') }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.6.1
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: automation-api/.venv
          key: venv-${{ runner.os }}-${{matrix.python}}-${{ hashFiles('automation-api/poetry.lock') }}

      - name: Install dependencies
        run: poetry install
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'

      - name: Run tests
        run: poetry run poe pytest
        working-directory: automation-api

  test-agent:
    name: "(agent) Test"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: [3.13]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      - name: Install uv
        run: pip install uv

      - name: Load cached uv venv
        id: cached-uv-dependencies
        uses: actions/cache@v4
        with:
          path: agent/.venv
          key: uv-venv-${{ runner.os }}-${{matrix.python}}-${{ hashFiles('agent/requirements.txt') }}

      - name: Install dependencies
        run: uv pip sync agent/requirements.txt --python $(which python) --virtualenv agent/.venv
        if: steps.cached-uv-dependencies.outputs.cache-hit != 'true'

      - name: Run tests
        run: uv run --python $(which python) --virtualenv agent/.venv python -m pytest agent
